// This file is auto-generated by sync-backend-types.ts script
// DO NOT EDIT DIRECTLY

// From serverless/autocomplete/src/types.ts
// City data format for autocomplete
export interface CityAutocompleteData {
    header: string[];
    cities: string[][];
}

// API Request/Response types
export interface AutocompleteRequest {
    action: 'autocomplete';
    query: string;
    limit?: number;
}

export interface AutocompleteResponse {
    results: {
        wikidataId: string;
        name: string;
        countryWikidataId: string;
        countryName: string;
        countryCode: string;
    }[];
    message?: string;
}


// From serverless/public/src/types.ts
// Vote storage format in S3
export type VoteData = Record<string, Record<string, [number, string, {
    title: string;
    name: string;
    actingCapacity: 'individual' | 'representingCityAdministration';
}][]>>;

// City data format
export interface City {
    id: string;
    name: string;
    authenticationKeyDistributionChannels: {
        account: string;
        type: 'linkedin' | 'email';
        confidence: number;
    }[];
}

// Public API Request/Response types (no authentication required)
export interface GetPublicVotesRequest {
    action: 'getVotes';
    cityId?: string;
}

export interface GetPublicCitiesRequest {
    action: 'getCities';
}

// API Response types
export interface GetVotesResponse {
    votes: VoteData;
    message?: string;
}

export interface GetCitiesResponse {
    cities: Record<string, City>;
}

// Registration API Request/Response types
export interface RegisterRequest {
    action: 'register';
    cityData: City;
}

export interface RegisterResponse {
    message: string;
    city?: City;
    error?: string;
}


// From serverless/vote/src/types.ts
// City data format
export interface City {
    id: string;
    name: string;
    population: number;
    country: string;
    lat: number;
    lon: number;
    authenticationKeyDistributionChannels: {
        account: string;
        type: 'linkedin' | 'email';
        confidence: number;
    }[];
}

// API Request/Response types
export interface ValidateTokenRequest {
    action: 'validateToken';
    token: string;
}

export interface VoteRequest {
    action: 'vote';
    cityId?: string;
    token: string;
    pollId: string;
    option: string;
    title: string;
    name: string;
    actingCapacity: 'individual' | 'representingCityAdministration';
}

export interface GetVotesRequest {
    action: 'getVotes';
    cityId?: string;
    token: string;
}

export interface GetCitiesRequest {
    action: 'getCities';
    token: string;
}

export interface CreatePollRequest {
    action: 'createPoll';
    token: string;
    pollId: string;
}

// API Response types
export interface ValidateTokenResponse {
    city: City;
    cityId: string;
    message?: string;
    details?: string;
}

export interface VoteResponse {
    message: string;
}

export interface GetVotesResponse {
    votes: VoteData;
    message?: string;
}

export interface GetCitiesResponse {
    cities: Record<string, City>;
}

export interface CreatePollResponse {
    message: string;
} 

