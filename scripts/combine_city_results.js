#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// Directories and files
const inputDir = path.join(__dirname, './data/cities');
const outputFile = path.join(__dirname, '../serverless/autocomplete/src/city-data.ts');

// Function to read and parse a JSON file
function readJsonFile(filePath) {
  try {
    const data = fs.readFileSync(filePath, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    console.error(`Error reading file ${filePath}:`, error);
    return null;
  }
}

// Function to find all result files from the Python script
function findResultFiles() {
  try {
    const files = fs.readdirSync(inputDir);
    // Filter for files that match the pattern cities_process_*_final.json
    return files
      .filter(file => file.match(/cities_process_\d+_final\.json/))
      .map(file => path.join(inputDir, file));
  } catch (error) {
    console.error('Error finding result files:', error);
    return [];
  }
}

// Function to combine city data from multiple files
function combineData(files) {
  let allCities = [];
  let header = ["cityWikidataId", "cityLabelEnglish", "countryWikidataId", "population", "coordinates", "officialWebsite"];
  
  for (const file of files) {
    const data = readJsonFile(file);
    if (data && data.cities && Array.isArray(data.cities)) {
      console.log(`Processing ${file}: Found ${data.cities.length} cities`);
      
      // Transform the data to match the target format
      // Each city should be [cityWikidataId, cityLabelEnglish, countryWikidataId, population, coordinates, officialWebsite]
      const transformedCities = data.cities.map(city => {
        // Assuming the order in the source is [cityWikidataId, cityLabelEnglish, countryWikidataId, ancestorType, population, coordinates, officialWebsite]
        return [city[0], city[1], city[2], city[4], city[5], city[6]]; // Skip ancestorType (index 3)
      });
      
      allCities = allCities.concat(transformedCities);
    } else {
      console.warn(`Warning: No valid data found in ${file}`);
    }
  }
  
  return { header, cities: allCities };
}

// Function to write the combined data to the TypeScript file
function writeTypeScriptFile(data) {
  // Format the cities array with each city on its own line
  const citiesLines = data.cities.map(city => `    ${JSON.stringify(city)}`).join(',\n');
  
  const tsContent = `import { CityAutocompleteData } from "./types";

// City data stored directly in the Lambda function to reduce latency
// This file is auto-generated by scripts/combine_city_results.js
export const CITY_DATA: CityAutocompleteData = {
  header: ${JSON.stringify(data.header)},
  cities: [
${citiesLines}
  ]
};
`;

  try {
    fs.writeFileSync(outputFile, tsContent);
    console.log(`Successfully wrote ${data.cities.length} cities to ${outputFile}`);
    return true;
  } catch (error) {
    console.error('Error writing TypeScript file:', error);
    return false;
  }
}

// Main function
function main() {
  console.log('Starting to combine city results...');
  
  // Find all result files
  const resultFiles = findResultFiles();
  console.log(`Found ${resultFiles.length} result files`);
  
  if (resultFiles.length === 0) {
    console.error('No result files found. Make sure the Python script has been run.');
    process.exit(1);
  }
  
  // Combine data from all files
  const combinedData = combineData(resultFiles);
  console.log(`Combined data: ${combinedData.cities.length} cities total`);
  
  // Write the combined data to the TypeScript file
  const success = writeTypeScriptFile(combinedData);
  
  if (success) {
    console.log('City data combination completed successfully!');
  } else {
    console.error('Failed to write combined city data.');
    process.exit(1);
  }
}

// Run the main function
main();
