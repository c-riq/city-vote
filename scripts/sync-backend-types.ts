import * as fs from 'fs';
import * as path from 'path';

// Get the project root directory
const projectRoot = path.resolve(__dirname, '..');

// Paths to the source type files
const typeFilePaths = [
  path.join(projectRoot, 'serverless/autocomplete/src/types.ts'),
  path.join(projectRoot, 'serverless/public/src/types.ts'),
  path.join(projectRoot, 'serverless/vote/src/types.ts')
];

// Path to the output file
const outputFilePath = path.join(projectRoot, 'frontend/src/backendTypes.ts');

// Main function
function main() {
  console.log('Starting to sync backend types...');
  
  // Header for the output file
  let outputContent = `// This file is auto-generated by sync-backend-types.ts script
// DO NOT EDIT DIRECTLY

`;
  
  // Read and concatenate each file
  for (const filePath of typeFilePaths) {
    console.log(`Reading types from ${filePath}...`);
    try {
      const content = fs.readFileSync(filePath, 'utf8');
      // Extract the relative path from the full path
      const relativePath = filePath.substring(projectRoot.length + 1);
      outputContent += `// From ${relativePath}\n${content}\n\n`;
    } catch (error) {
      console.error(`Error reading file ${filePath}:`, error);
      process.exit(1);
    }
  }
  
  // Write the concatenated content to the output file
  try {
    fs.writeFileSync(outputFilePath, outputContent);
    console.log(`Successfully wrote types to ${outputFilePath}`);
  } catch (error) {
    console.error(`Error writing to ${outputFilePath}:`, error);
    process.exit(1);
  }
}

// Run the main function
main();
